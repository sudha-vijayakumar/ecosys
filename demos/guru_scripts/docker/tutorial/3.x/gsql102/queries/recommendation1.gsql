use graph ldbc_snb
set query_timeout=60000
DROP QUERY RecommendMessage

CREATE QUERY RecommendMessage (String fn, String ln) {

  SumAccum<int> @TagInCommon;
  SumAccum<float> @SimilarityScore;
  SumAccum<float> @Rank;
  OrAccum @Liked = false;

  #1. mark messages liked by Viktor
  #2. calculate log similarity score for each persons share the same
  #   interests at Tag level.
  Others =
    SELECT p
    FROM Person:s -(LIKES>)- :msg -(HAS_TAG>.<HAS_TAG.<LIKES)- :p
    WHERE s.firstName == fn AND s.lastName == ln
    ACCUM msg.@Liked = true, p.@TagInCommon += 1
    POST-ACCUM p.@SimilarityScore = log (1 + p.@TagInCommon);

  # recommend new messages to Viktor that have not liked by him.
  RecommendedMessage =
    SELECT msg
    FROM Others:o -(LIKES>)- :msg
    WHERE msg.@Liked == false
    ACCUM msg.@Rank += o.@SimilarityScore
    ORDER BY msg.@Rank DESC
    LIMIT 2;

  PRINT   RecommendedMessage[RecommendedMessage.content, RecommendedMessage.@Rank];
}


INTERPRET QUERY RecommendMessage ("Viktor", "Akhiezer")
#try the second person with just parameter change.
#INTERPRET QUERY RecommendMessage ("Adriaan", "Jong")
