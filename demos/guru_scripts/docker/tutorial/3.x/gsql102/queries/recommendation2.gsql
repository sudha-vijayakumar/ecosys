USE GRAPH ldbc_snb
SET query_timeout=60000
DROP QUERY RecommendMessage

CREATE QUERY RecommendMessage (String fn, String ln) {

  SumAccum<int> @MsgInCommon = 0;
  SumAccum<int> @MsgCnt = 0;
  SumAccum<int> @@InputPersonMsgCnt = 0;
  SumAccum<float> @SimilarityScore;
  SumAccum<float> @Rank;
  SumAccum<float> @TagCnt = 0;
  OrAccum @Liked = false;
  float sqrtOfInputPersonMsgCnt;

  #1. mark messages liked by input user
  #2. find common msg between input user and other persons
  Others =
    SELECT p
    FROM Person:s -(LIKES>)- :msg -(<LIKES)- :p
    WHERE s.firstName == fn AND s.lastName == ln
    ACCUM msg.@Liked = true, @@InputPersonMsgCnt += 1,
          p.@MsgInCommon += 1;

  sqrtOfInputPersonMsgCnt = sqrt(@@InputPersonMsgCnt);

  # calculate cosine similarity score.
  # |AxB|/(sqrt(Sum(A_i^2) * sqrt(Sum(B_i^2)))
  Others =
    SELECT o
    FROM Others:o -(LIKES>)- :msg
    ACCUM o.@MsgCnt += 1
    POST-ACCUM o.@SimilarityScore = o.@MsgInCommon / (sqrtOfInputPersonMsgCnt * sqrt(o.@MsgCnt));

  # recommend new messages to input user that have not liked by him.
  RecommendedMessage =
    SELECT msg
    FROM Others:o-(LIKES>)- :msg
    WHERE  msg.@Liked == false
    ACCUM msg.@Rank += o.@SimilarityScore
    ORDER BY msg.@Rank DESC
    LIMIT 3;

  PRINT RecommendedMessage[RecommendedMessage.content, RecommendedMessage.@Rank];
}

INTERPRET query RecommendMessage("Viktor", "Akhiezer")
